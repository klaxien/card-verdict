syntax = "proto3";

package cardverdict.v1;

// ===================================================================
// 1. 枚举定义 (Enums)
// ===================================================================

// 定义信用卡发卡机构
enum Issuer {
  ISSUER_UNSPECIFIED = 0;
  AMEX = 1;
  CHASE = 2;
  CAPITAL_ONE = 3;
  CITI = 4;
  BANK_OF_AMERICA = 5;
  US_BANK = 6;
  HSBC = 7;
  CITY_NATIONAL_BANK = 8;
}

// 定义信用/报销福利的频率
enum CreditFrequency {
  FREQUENCY_UNSPECIFIED = 0;
  ANNUAL = 1;         // 每年一次
  SEMI_ANNUAL = 2;    // 每半年一次
  QUARTERLY = 3;      // 每季度一次
  MONTHLY = 4;        // 每月一次
}

// 定义一个标准的、语义化的报销类别枚举
// 这个枚举定义“是什么”，而具体“在哪里用”由其他字段决定
enum CreditType {
  CREDIT_TYPE_UNSPECIFIED = 0;
  TRAVEL = 1;                           // 通用旅行报销 (e.g., Chase Sapphire Reserve)
  TRAVEL_PORTAL = 2;                    // 旅行门户网站报销 (e.g., Capital One Venture X, Delta Stays)
  AIRLINE_FEE = 3;                      // 航空杂费 (行李、选座等)
  AIRLINE_CREDIT = 4;                   // 航司通用消费金/现金券 (e.g., United TravelBank, JSX Credit)
  HOTEL_STAY = 5;                       // 通用酒店住宿报销 (e.g., Citi Strata's hotel credit)
  HOTEL_PROPERTY_CREDIT = 6;            // 特定酒店内的消费报销 (e.g., a $100 F&B credit during a stay)
  DINING = 7;                           // 餐饮 (通用或特定商户, e.g., Amex Gold, Resy)
  RIDESHARE = 8;                        // 网约车 (e.g., Uber, Lyft)
  FOOD_DELIVERY = 9;                    // 外卖服务 (e.g., DoorDash, Instacart, Grubhub)
  DIGITAL_ENTERTAINMENT = 10;           // 流媒体/新闻订阅 (e.g., Amex Platinum's Digital credit)
  RETAIL = 11;                          // 零售商户 (e.g., Saks, Dunkin')
  FITNESS = 12;                         // 健身会员 (e.g., Equinox, Peloton)
  GROUND_TRANSPORTATION = 13;           // 地面交通 (租车, 专车 e.g., Avis, Budget, Blacklane)
  TICKETING_SERVICE = 14;               // 票务服务 (e.g., StubHub)
  LIFESTYLE = 15;                       // 综合生活方式报销 (e.g., BoA Premium Elite, Citi Splurge Credit)
  MEMBERSHIP_REIMBURSEMENT = 16;        // 会员费报销 (e.g., Walmart+, CLEAR, DashPass, Lounge Membership Fee)

  // 非现金等价物福利 (Non-cash-equivalent benefits)
  COMPANION_TICKET = 50;                // 同行机票
  FREE_NIGHT_AWARD = 51;                // 年度免费房券 (FN)
  POINTS_OR_MILES_BONUS = 52;           // 年度积分/里程奖励 (e.g., Venture X 10k miles)
  LOUNGE_MEMBERSHIP = 53;               // 完整的休息室会籍 (e.g., United Club, Admirals Club)
}


// ===================================================================
// 2. 核心消息体 (Core Messages)
// ===================================================================

// 为不规则的报销周期定义一个例外结构
message PeriodOverride {
  // 定义此例外适用的周期。索引从 1 开始，以符合人类的直观理解。
  // - 对于 MONTHLY, 此值为 1-12 (1 = 一月, 12 = 十二月)。
  // - 对于 QUARTERLY, 此值为 1-4。
  // - 对于 SEMI_ANNUAL, 此值为 1-2。
  int32 period = 1;

  // 在该特定周期的报销金额 (以美分为单位)。
  int32 value_cents = 2;
}

// 定义一个具体的信用/报销项目
message Credit {
  // (新增) 唯一的、人类可读的福利标识符，在单张卡片内必须唯一。
  // e.g., "uber-cash", "saks-credit", "airline-fee-credit"
  string credit_id = 1;

  // 报销类型
  CreditType type = 2;

  // 报销频率
  CreditFrequency frequency = 3;

  // 每个周期的“标准”报销金额 (以美分为单位)。
  // 如果福利完全不规则 (例如，只在特定月份提供)，可将此设为 0。
  int32 default_period_value_cents = 4;

  // 一个列表，包含所有金额不符合标准的周期。
  // 用于处理 "1-11月每月$15, 12月$35" 这样的例外情况。
  repeated PeriodOverride overrides = 5;

  // 限定商户列表。
  // 如果此列表非空，则表示福利仅适用于列表中的商户。
  // 如果列表为空，则表示福利是通用的 (适用于该类别下的任何商户)。
  repeated string qualifying_merchants = 6;

  // 额外备注，用于说明人类易读的、无法结构化的使用条件。
  // e.g., "需预定至少两晚", "每年最多使用两次"
  string details = 7;

  // 官方/默认的等效价值 (Represents the default perceived value)
  oneof default_effective_value {
    // 价值比例 (e.g., 0.8 represents 80% of face value)
    float default_effective_value_proportion = 8;
    // 绝对价值 (以美分为单位)
    int32 default_effective_value_cents = 9;
  }

  // 对默认估值的解释 (Explanation for the assigned default value)
  string default_effective_value_explanation = 10;
}

// 定义其他福利项目，现在是一个包含多种具体福利的容器
message OtherBenefit {
  // (新增) 唯一的、人类可读的福利标识符，在单张卡片内必须唯一。
  // e.g., "priority-pass", "global-entry-reimbursement", "primary-rental-insurance"
  string benefit_id = 1;

  // 官方/默认的等效价值 (Represents the default perceived value)
  oneof default_effective_value {
    // 价值比例 (e.g., 0.8 represents 80% of face value)
    float default_effective_value_proportion = 2;
    // 绝对价值 (以美分为单位)
    int32 default_effective_value_cents = 3;
  }

  // 对默认估值的解释 (Explanation for the assigned default value)
  string default_effective_value_explanation = 4;

  // 使用 oneof 确保一个福利条目只有一个具体的、结构化的类型。
  oneof benefit_type {
    // 对于无法结构化的其他福利（如保险），保留一个通用描述
    string generic_benefit_description = 5;

    LoungeAccessBenefit lounge_access = 6;
    TravelStatusBenefit travel_status = 7;
    FeeReimbursementBenefit fee_reimbursement = 8;
    BaggageBenefit baggage = 9;
    PointPerkBenefit point_perk = 10;
    CarRentalInsuranceBenefit car_rental_insurance = 11;
  }
}


// ===================================================================
// 3. "OtherBenefit" 的具体结构化消息
// ===================================================================

// 用于描述休息室权益
message LoungeAccessBenefit {
  // 定义可用的休息室网络
  enum LoungeNetwork {
    NETWORK_UNSPECIFIED = 0;
    PRIORITY_PASS_SELECT = 1;
    AMEX_CENTURION = 2;
    DELTA_SKY_CLUB = 3;
    UNITED_CLUB = 4;
    AA_ADMIRALS_CLUB = 5;
    CHASE_SAPPHIRE_LOUNGE = 6;
  }

  // 定义权益中包含的额外服务
  enum AdditionalService {
    SERVICE_UNSPECIFIED = 0;
    RESTAURANT = 2; // e.g., Priority Pass 餐厅
  }

  LoungeNetwork network = 1;

  // 可免费携带的同行宾客数量。
  // 对于更复杂的政策（例如“按人头扣费”），此值可为0，具体细节在 restrictions 字段中说明。
  int32 guest_count = 2;

  // 权益中明确包含的额外服务列表。
  repeated AdditionalService included_services = 3;

  // 其他限制条件。
  // e.g., "每年10次准入", "仅限搭乘DL航班时", "同行者按$29/人收费"
  repeated string notes = 4;
}

// 用于描述旅行相关的身份/状态
message TravelStatusBenefit {
  enum StatusType {
    STATUS_UNSPECIFIED = 0;
    HOTEL_ELITE_STATUS = 1;
    AIRLINE_PRIORITY_ACCESS = 2; // e.g., 优先登机, Premier Access
    AIRLINE_UPGRADE_ELIGIBILITY = 3;
  }
  StatusType type = 1;
  string description = 2; // e.g., "IHG Platinum 会籍", "DL航班Zone 5优先登机权", "免费排上 Delta Upgrade List"
}

// 用于描述申请费报销 (Global Entry等)
message FeeReimbursementBenefit {
  enum Program {
    PROGRAM_UNSPECIFIED = 0;
    GLOBAL_ENTRY = 1;
    TSA_PRECHECK = 2;
    NEXUS = 3;
  }
  // 允许多个项目，因为有些卡是三选一报销
  repeated Program programs = 1;
  string details = 2; // e.g., "每4年报销一次"
}

// 用于描述行李额度
message BaggageBenefit {
  // e.g., 1 for "1件免费托运行李", 2 for "2件免费托运行李"
  int32 free_checked_bags_count = 1;
  string details = 2; // e.g., "仅限本人及同一预订下的至多8位同行者"
}

// 用于描述积分/里程相关的特权
message PointPerkBenefit {
  // 这里的描述很关键，因为许多特权难以进一步结构化
  // e.g., "兑换DL里程票可获得15% off", "可以看到额外的经济舱XN舱余票", "住三送一", "在Expedia和Agoda订酒店可获得10% off"
  string description = 1;
}

message CarRentalInsuranceBenefit {
  enum CoverageType {
    COVERAGE_TYPE_UNSPECIFIED = 0;
    PRIMARY = 1;
    SECONDARY = 2;
  }
  CoverageType coverage_type = 1;
  string notes = 2;
}

// ===================================================================
// 4. 消费与积分相关消息 (Earning & Points Messages)
// ===================================================================

message EarningRate {
  // (核心新增) 唯一的、人类可读的返现规则标识符，在单张卡片内必须唯一。
  // 这个ID应该在规则的生命周期内保持稳定，即使返现比例等细节发生变化。
  // e.g., "amex-gold-dining", "amex-gold-grocery-us", "csp-travel-portal"
  string earning_rate_id = 1;

  // 累积乘数 (例如, 5.0 代表 5x 或 5% 返现)
  float multiplier = 2;

  // 消费类别
  SpendingCategory category = 3;

  // 消费渠道/限制
  Channel channel = 4;

  // 限定商户列表。
  // 仅当 channel 为 SPECIFIC_MERCHANTS 时有效。
  // e.g., ["Starbucks", "The Cheesecake Factory"]
  repeated string qualifying_merchants = 5;

  // 额外注解，用于说明人类易读的、无法结构化的使用条件。
  // e.g., "每年仅限前$25,000消费", "仅限美国境内消费"
  string notes = 6;

  // (新增) 定义标准的消费类别 (Spending Category)
  // 这个枚举定义消费的“本质”，不关心渠道。
  enum SpendingCategory {
    CATEGORY_UNSPECIFIED = 0;
    TRAVEL = 1;                   // 综合旅行 (可作为默认，或用于涵盖子项未覆盖的旅行消费)
    FLIGHT = 2;                   // 机票
    HOTEL = 3;                    // 酒店
    CAR_RENTAL = 4;               // 租车
    CRUISE = 5;                   // 邮轮

    DINING = 10;                  // 餐饮
    GROCERY_STORES = 11;          // 超市

    STREAMING_SERVICES = 20;      // 流媒体服务
    TRANSIT = 21;                 // 日常通勤/交通 (公交, 地铁, 打车)
    GAS_STATIONS = 22;            // 加油站

    PHARMACIES = 30;              // 药店

    ALL_OTHER = 100;              // 所有其他消费 (通常是1x返现的基础类别)
  }

  // (新增) 定义消费返现的渠道或限制条件 (Channel)
  enum Channel {
    CHANNEL_UNSPECIFIED = 0;
    GENERAL = 1;                  // 通用渠道 (无特殊限制，适用于该类别下的所有商户)
    DIRECT = 2;                   // 直接通过服务商预定 (e.g., 在航空公司官网、酒店官网)
    TRAVEL_PORTAL = 3;            // 通过发卡行的旅行门户 (e.g., Chase Travel, AmexTravel.com)
    SPECIFIC_MERCHANTS = 4;       // 仅限特定商户 (需配合 qualifying_merchants 字段使用)
  }
}


// 用于描述卡片关联的、具体的积分体系信息
message PointSystemInfo {
  // 积分体系的唯一、细粒度标识符。这是用户估值的关键key。
  // e.g., "ur-transferable", "typ-premium", "typ-cash-back", "altitude-reserve"
  string system_id = 1;

  // 定义高阶的积分体系“家族”，用于分类。
  // 这与具体的积分规则（是否可转点等）解耦。
  enum PointSystem {
    SYSTEM_UNSPECIFIED = 0;
    AMEX_MEMBERSHIP_REWARDS = 1;
    CHASE_ULTIMATE_REWARDS = 2;
    CITI_THANKYOU_POINTS = 3;
    CAPITAL_ONE_MILES = 4;
    MARRIOTT_BONVOY = 5;
    HILTON_HONORS = 6;
    DELTA_SKYMILES = 7;
    UNITED_MILEAGEPLUS = 8;
    AA_AADVANTAGE = 9;
    US_BANK_ALTITUDE = 10;
    // 可以根据需要添加更多体系...
  }

  // 积分体系的“家族”分类，用于UI分组和逻辑归类
  PointSystem system_type = 2;

  // 该积分体系的“官方”或“默认”估值 (以美分为单位)。
  float default_cents_per_point = 3;

  // 对该估值的解释或说明。
  // e.g., "可1:1转点至多个航司酒店伙伴，综合估值", "仅可1cpp兑换现金"
  string notes = 4;
}

// ===================================================================
// 5. 顶层消息体 (Top-Level Messages)
// ===================================================================

// 主消息体，代表一张信用卡
message CreditCard {
  // (新增) 唯一的、人类可读的信用卡标识符。
  // e.g., "amex-platinum", "chase-sapphire-preferred"
  string card_id = 1;

  string name = 2;

  // 卡片图名字
  string image_name = 3;

  Issuer issuer = 4;
  int32 annual_fee_cents = 5;

  // 这张卡提供的所有基于“返还”的福利
  repeated Credit credits = 6;

  // 这张卡提供的所有其他类型的福利
  repeated OtherBenefit other_benefits = 7;

  // 这张卡的所有消费返现/积分累积规则
  repeated EarningRate earning_rates = 8;

  // 卡片关联的积分/里程体系的详细信息
  PointSystemInfo point_system_info = 9;
}

// 用于存储一个信用卡列表
message CreditCardDatabase {
  repeated CreditCard cards = 1;
}
